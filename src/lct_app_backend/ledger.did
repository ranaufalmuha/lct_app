type Account = record {
    owner : principal;
    subaccount : opt vec nat8;
};

type Tokens = record {
    e8s : nat64;
};

type TimeStamp = record {
    timestamp_nanos : nat64;
};

type TransferArgs = record {
    memo : nat64;
    amount : Tokens;
    fee : Tokens;
    from_subaccount : opt vec nat8;
    to : vec nat8;
    created_at_time : opt TimeStamp;
};

type TransferError = variant {
    BadFee : record { expected_fee : Tokens };
    InsufficientFunds : record { balance : Tokens };
    TxTooOld : record { allowed_window_nanos : nat64 };
    TxCreatedInFuture : null;
    TxDuplicate : record { duplicate_of : nat64 };
};

type TransferResult = variant {
    Ok : nat64;
    Err : TransferError;
};

service : {
    account_balance : (record { account : vec nat8 }) -> (Tokens) query;
    transfer : (TransferArgs) -> (TransferResult);
};
